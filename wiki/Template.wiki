#labels Template,JSI,JSA
==JSISIDE的模板框架的架构风格==

JSISIDE模板框架是一个微指令集及其编译处理支持，还有基于该统一的微指令集的模板系列，他可以支持不同类型的模板语言，这些不同的语法，都可以解析转换成一种统一的中间数据，模板指令集，然后，通过统一的编译过程，将这些模板数据转换成可渲染的模板函数。

===数据存在形式===

模板原文件--->模板指令集-->模板对象
模板源文件，可以是一个[http://www.commontemplate.org/ CT]，[http://velocity.apache.org/ Velocity]类似语法的文本模板，也可以是一个jelly类似的XML模板，也可以是一个smarty类似的模板。这些模板源文件通过解析后（调试时，这一步可以运行期完成；系统正式发布后，这一步可以在编译期完成），被转换成模板指令集；这个指令集再通过简单的遍历，转换成可以执行的渲染函数。

===模板解析过程===
基本的思路是，先把模板的静态数据和动态指令编译成一个一维数组。其中指令以简单对象的方式存在，我们可以使用json标准去系列化这种中间代码。

===模板编译过程===
模板运行前，通过一个类似敲木桩的过程，吧这种一维数组转换成有效的模板函数。



===微指令集合===
常用的简单指令：
||type          ||object                   || comment||
||el            || [0,'exp',unescape]      || 普通el||
||attribute     || [1,name1,exp]           ||||
||if            || [2,'exp']               ||||
||else if       || [3,'exp']               ||||
||else          || [4]                     ||||
||var           || [5,'var','el']          || 设置某个变量（el ？ string）||
||out           || [6,'el']                || 输出某个表达式的值，不转义（转义使用el）||
||end:          || []                      || 结束标签（如for if else 等是必须要结束标签的）||

更复杂的指令有：
||type          || object                  ||comment||
||for           ||{var : ’item’ , value:[1,2,3],status:’status’,begin:1,end:2} || for循环||

一些在编译期间被处理掉的无需指令的语法元素
||include || {type:0,url:..,xpath:..,name:..}                ||包含某个页面，或者页面片段（xpath），或者一个命名节点||
||template|| {type:1,url:...,name:...}                       ||将自己挂起，替换为模板页面，而模板页面中，可以引用自己这个节点，有点类似sitemash的功能||
